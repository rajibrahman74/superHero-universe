import useTitle from "../../hooks/useTitle";

const Blog = () => {
  useTitle("Blog")
  return (
    <section>
      <style
        dangerouslySetInnerHTML={{
          __html:
            "@import url(https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/css/materialdesignicons.min.css);",
        }}
      />
      <h2 className="text-center font-bold text-3xl pt-16 pb-10">Blogs</h2>
      <div className="max-w-7xl mt-8 mb-12 mx-auto flex flex-col gap-16 px-4">
        <div className="p-5 shadow-md rounded-md flex flex-col gap-8">
          <p className="text-xl font-bold">
            1. What is an access token and refresh token? How do they work and
            where should we store them on the client-side?
          </p>
          <div className="flex flex-col gap-3">
            <p className="text-lg">
              Access tokens and refresh tokens are two types of tokens used in
              OAuth 2.0, an open standard for authorization. OAuth 2.0 allows
              third-party applications to access a user&apos;s resources, such
              as their email address or calendar, without the user having to
              enter their login credentials each time.
            </p>
            <p className="text-lg">
              <span className="font-bold">Access token:</span> An access token
              is a short-lived token that is used to access protected resources.
              Access tokens are typically generated by an authorization server
              and are passed to the client application. The client application
              then uses the access token to make requests to the resource
              server. Access tokens typically have a limited lifespan and expire
              after a certain amount of time.
            </p>
            <p className="text-lg">
              <span className="font-bold">Refresh token:</span> A refresh token
              is a long-lived token that can be used to obtain new access
              tokens. Refresh tokens are typically generated by the
              authorization server and are stored by the client application. The
              client application can use the refresh token to request a new
              access token when the current access token expires. Refresh tokens
              typically have a longer lifespan than access tokens and can be
              used to obtain multiple access tokens.
            </p>
          </div>
        </div>

        <div className="p-5 shadow-md rounded-md flex flex-col gap-6">
          <p className="text-xl font-bold">
            2. Compare SQL and NoSQL databases?
          </p>
          <div className="flex flex-col gap-3">
            <p className="text-lg">
              SQL and NoSQL databases are both powerful tools that can be used
              to store and manage data. However, they have different strengths
              and weaknesses, so the best choice for a particular application
              will depend on the specific requirements.
            </p>
            <p className="text-lg">
              <span className="font-bold">SQL:</span> SQL databases are more
              rigid and structured than NoSQL databases. They use a relational
              data model, which means that data is stored in tables with rows
              and columns. This makes SQL databases well-suited for applications
              that require complex queries and data analysis. However, SQL
              databases can be more difficult to scale than NoSQL databases.
            </p>
            <p className="text-lg">
              <span className="font-bold">NoSQL:</span> NoSQL databases are more
              flexible and scalable than SQL databases. They use a variety of
              data models, including documents, key-value pairs, graphs, and
              wide columns. This makes NoSQL databases well-suited for
              applications that require storing large amounts of unstructured
              data or that need to scale horizontally. However, NoSQL databases
              can be less efficient for complex queries and data analysis.
            </p>
          </div>
        </div>

        <div className="p-5 shadow-md rounded-md flex flex-col gap-6">
          <p className="text-xl font-bold">
            3. What is express JS? What is Nest JS?
          </p>
          <div className="flex flex-col gap-3">
            <p className="text-lg">
              <span className="font-bold">Express JS: </span>
              Express.js is a popular web application framework for Node.js. It
              is designed to build web applications and APIs quickly and easily.
              Express.js provides a simple and minimalist approach to building
              web servers, handling HTTP requests, routing, middleware, and
              other common web development tasks. It is known for its
              flexibility, lightweight nature, and extensive ecosystem of
              middleware and plugins.
            </p>
            <p className="text-lg">
              <span className="font-bold">Nest JS:</span> NestJS is a
              progressive, TypeScript-based framework for building efficient and
              scalable server-side applications. It is built on top of
              Express.js and incorporates ideas from Angular, providing a
              structured and modular architecture. NestJS promotes the use of
              decorators, dependency injection, and TypeScript decorators to
              create highly maintainable and testable code. It offers features
              like routing, dependency injection, middleware, and many other
              powerful tools that simplify the development of complex backend
              applications. NestJS also has built-in support for WebSockets and
              GraphQL.
            </p>
          </div>
        </div>

        <div className="p-5 shadow-md rounded-md flex flex-col gap-6">
          <p className="text-xl font-bold">
            4. What is MongoDB aggregate and how does it work?
          </p>
          <div className="flex flex-col gap-3">
            <p className="text-lg">
              <span className="font-bold">MongoDD agregate:</span> MongoDB
              aggregate is a feature that allows you to perform complex
              operations on data in a MongoDB collection. Aggregate operations
              are performed using a pipeline of stages, each of which performs a
              specific operation on the data. The stages are chained together,
              and the output of each stage is passed to the next stage.
              <br />
              MongoDB aggregate is a powerful tool that can be used to perform
              complex operations on data in a MongoDB collection. By chaining
              together different stages, you can perform a wide variety of
              operations on your data.
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Blog;